[project]
name = "ramen-api"
version = "0.1.0"
description = "API for Ramen SNS"
authors = [
    { name = "kohdice", email = "kohdice@gmail.com" },
    { name = "kazumasato0214", email = "hoge@example.com" },
]
dependencies = ["fastapi>=0.111.0"]
# readme = "README.md"
requires-python = ">= 3.12"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "ruff>=0.4.4",
    "mypy>=1.10.0",
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
]

[tool.rye.scripts]
cov = { cmd = "pytest -s -vv --cov=. --cov-branch --cov-report=html" }
citest = { cmd = "pytest --cov=. --cov-branch --cov-report=xml" }
fix = { cmd = "ruff --fix ramen tests" }
fmt = { chain = ["fmt:ruff", "fmt:sort"] }
"fmt:ruff" = "ruff format ramen tests"
"fmt:sort" = "ruff check --select I --fix ramen tests"
lint = { chain = ["lint:ruff", "lint:mypy"] }
"lint:ruff" = "ruff check ramen tests"
"lint:mypy" = "mypy ramen tests"
"lint:diff" = "ruff check --diff ramen tests"
venv = { cmd = ". .venv/bin/activate" }

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["ramen_api"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "N", "UP", "B", "A", "PT", "SIM"]
ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.mypy]
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
omit = ["tests/*", ".venv/*", "migrations/*"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
